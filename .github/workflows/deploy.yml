name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y netcat-openbsd
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for MongoDB and Redis
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "Waiting for Redis to be ready..."
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        echo "Services are ready!"
    
    - name: Run backend tests
      run: |
        cd backend
        touch tests/__init__.py
        python -m pytest
      env:
        MONGODB_URI: mongodb://localhost:27017/taskmanager_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: D20MD3AGT9Firs82PlnRsoUQO3zf6G940pwPYeYBFQP4u1k6ysflRy4o6c
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend build
      run: |
        cd frontend
        npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        log-public-key: true
    
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to VPS
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}  # Production MongoDB URI
        REDIS_HOST: ${{ secrets.REDIS_HOST }}    # Production Redis host
        REDIS_PORT: ${{ secrets.REDIS_PORT }}    # Production Redis port
        JWT_SECRET: ${{ secrets.JWT_SECRET }}    # Production JWT secret
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}  # Production API URL
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=accept-new ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ${{ secrets.VPS_PATH }}"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && git pull || git clone https://github.com/${{ github.repository }}.git ."
        
        # Create an .env file on the VPS with secrets
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'MONGODB_URI=$MONGODB_URI' > .env"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'REDIS_HOST=$REDIS_HOST' >> .env"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'REDIS_PORT=$REDIS_PORT' >> .env"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'JWT_SECRET=$JWT_SECRET' >> .env"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL' >> .env"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && echo 'VPS_HOST=$VPS_HOST' >> .env"
        
        # Run Docker Compose commands
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && docker-compose down"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && docker-compose build"
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd ${{ secrets.VPS_PATH }} && docker-compose up -d"